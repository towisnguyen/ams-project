/**
 * Demo REST API
 * User Management API.
 *
 * OpenAPI spec version: API v1.0.0
 * Contact: nhtoi@tma.com.vn
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { RequestDto } from '../model/requestDto';
import { RequestSearchDto } from '../model/requestSearchDto';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class RequestControllerService {

    protected basePath = '//10.102.1.190:8080';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Create new request for system
     * Create new request
     * @param body requestDto
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createNewRequestUsingPOST(body: RequestDto, observe?: 'body', reportProgress?: boolean): Observable<RequestDto>;
    public createNewRequestUsingPOST(body: RequestDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<RequestDto>>;
    public createNewRequestUsingPOST(body: RequestDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<RequestDto>>;
    public createNewRequestUsingPOST(body: RequestDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createNewRequestUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<RequestDto>('post',`${this.basePath}/api/v1/requests/add`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete a request for system
     * Delete a request by id
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteRequestUsingDELETE1(id: number, observe?: 'body', reportProgress?: boolean): Observable<RequestDto>;
    public deleteRequestUsingDELETE1(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<RequestDto>>;
    public deleteRequestUsingDELETE1(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<RequestDto>>;
    public deleteRequestUsingDELETE1(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteRequestUsingDELETE1.');
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<RequestDto>('delete',`${this.basePath}/api/v1/requests/delete/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get all requests
     * Get all requests
     * @param orderBy orderBy
     * @param page page
     * @param size size
     * @param sortBy sortBy
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllRequestUsingGET(orderBy?: string, page?: number, size?: number, sortBy?: string, observe?: 'body', reportProgress?: boolean): Observable<RequestSearchDto>;
    public getAllRequestUsingGET(orderBy?: string, page?: number, size?: number, sortBy?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<RequestSearchDto>>;
    public getAllRequestUsingGET(orderBy?: string, page?: number, size?: number, sortBy?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<RequestSearchDto>>;
    public getAllRequestUsingGET(orderBy?: string, page?: number, size?: number, sortBy?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {





        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (orderBy !== undefined && orderBy !== null) {
            queryParameters = queryParameters.set('orderBy', <any>orderBy);
        }
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (size !== undefined && size !== null) {
            queryParameters = queryParameters.set('size', <any>size);
        }
        if (sortBy !== undefined && sortBy !== null) {
            queryParameters = queryParameters.set('sortBy', <any>sortBy);
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<RequestSearchDto>('get',`${this.basePath}/api/v1/requests`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Find a request by id
     * Find a request by id
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getOneRequestUsingGET(id: number, observe?: 'body', reportProgress?: boolean): Observable<RequestSearchDto>;
    public getOneRequestUsingGET(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<RequestSearchDto>>;
    public getOneRequestUsingGET(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<RequestSearchDto>>;
    public getOneRequestUsingGET(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getOneRequestUsingGET.');
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<RequestSearchDto>('get',`${this.basePath}/api/v1/requests/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Search request by Asset name
     * Search request by Asset name
     * @param assetName assetName
     * @param orderBy orderBy
     * @param page page
     * @param size size
     * @param sortBy sortBy
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public searchRequestByAssetNameUsingGET(assetName?: string, orderBy?: string, page?: number, size?: number, sortBy?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public searchRequestByAssetNameUsingGET(assetName?: string, orderBy?: string, page?: number, size?: number, sortBy?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public searchRequestByAssetNameUsingGET(assetName?: string, orderBy?: string, page?: number, size?: number, sortBy?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public searchRequestByAssetNameUsingGET(assetName?: string, orderBy?: string, page?: number, size?: number, sortBy?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {






        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (assetName !== undefined && assetName !== null) {
            queryParameters = queryParameters.set('assetName', <any>assetName);
        }
        if (orderBy !== undefined && orderBy !== null) {
            queryParameters = queryParameters.set('orderBy', <any>orderBy);
        }
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (size !== undefined && size !== null) {
            queryParameters = queryParameters.set('size', <any>size);
        }
        if (sortBy !== undefined && sortBy !== null) {
            queryParameters = queryParameters.set('sortBy', <any>sortBy);
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/api/v1/requests/searchByAssetName`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Search request by assetName, status, type, inventoryNumber
     * Search request by assetName, status, type, inventoryNumber
     * @param assetName assetName
     * @param inventoryNumber inventoryNumber
     * @param orderBy orderBy
     * @param page page
     * @param requestType requestType
     * @param size size
     * @param sortBy sortBy
     * @param status status
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public searchRequestByCertainFieldsUsingGET(assetName?: string, inventoryNumber?: string, orderBy?: string, page?: number, requestType?: string, size?: number, sortBy?: string, status?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public searchRequestByCertainFieldsUsingGET(assetName?: string, inventoryNumber?: string, orderBy?: string, page?: number, requestType?: string, size?: number, sortBy?: string, status?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public searchRequestByCertainFieldsUsingGET(assetName?: string, inventoryNumber?: string, orderBy?: string, page?: number, requestType?: string, size?: number, sortBy?: string, status?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public searchRequestByCertainFieldsUsingGET(assetName?: string, inventoryNumber?: string, orderBy?: string, page?: number, requestType?: string, size?: number, sortBy?: string, status?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {









        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (assetName !== undefined && assetName !== null) {
            queryParameters = queryParameters.set('assetName', <any>assetName);
        }
        if (inventoryNumber !== undefined && inventoryNumber !== null) {
            queryParameters = queryParameters.set('inventoryNumber', <any>inventoryNumber);
        }
        if (orderBy !== undefined && orderBy !== null) {
            queryParameters = queryParameters.set('orderBy', <any>orderBy);
        }
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (requestType !== undefined && requestType !== null) {
            queryParameters = queryParameters.set('requestType', <any>requestType);
        }
        if (size !== undefined && size !== null) {
            queryParameters = queryParameters.set('size', <any>size);
        }
        if (sortBy !== undefined && sortBy !== null) {
            queryParameters = queryParameters.set('sortBy', <any>sortBy);
        }
        if (status !== undefined && status !== null) {
            queryParameters = queryParameters.set('status', <any>status);
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/api/v1/requests/search`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Search request by Inventory Number
     * Search request by Inventory Number
     * @param inventoryNumber inventoryNumber
     * @param orderBy orderBy
     * @param page page
     * @param size size
     * @param sortBy sortBy
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public searchRequestByInventoryNumberUsingGET(inventoryNumber?: string, orderBy?: string, page?: number, size?: number, sortBy?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public searchRequestByInventoryNumberUsingGET(inventoryNumber?: string, orderBy?: string, page?: number, size?: number, sortBy?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public searchRequestByInventoryNumberUsingGET(inventoryNumber?: string, orderBy?: string, page?: number, size?: number, sortBy?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public searchRequestByInventoryNumberUsingGET(inventoryNumber?: string, orderBy?: string, page?: number, size?: number, sortBy?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {






        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (inventoryNumber !== undefined && inventoryNumber !== null) {
            queryParameters = queryParameters.set('inventoryNumber', <any>inventoryNumber);
        }
        if (orderBy !== undefined && orderBy !== null) {
            queryParameters = queryParameters.set('orderBy', <any>orderBy);
        }
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (size !== undefined && size !== null) {
            queryParameters = queryParameters.set('size', <any>size);
        }
        if (sortBy !== undefined && sortBy !== null) {
            queryParameters = queryParameters.set('sortBy', <any>sortBy);
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/api/v1/requests/searchByInventoryNumber`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Search request by Status
     * Search request by Status
     * @param orderBy orderBy
     * @param page page
     * @param size size
     * @param sortBy sortBy
     * @param status status
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public searchRequestByStatusUsingGET(orderBy?: string, page?: number, size?: number, sortBy?: string, status?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public searchRequestByStatusUsingGET(orderBy?: string, page?: number, size?: number, sortBy?: string, status?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public searchRequestByStatusUsingGET(orderBy?: string, page?: number, size?: number, sortBy?: string, status?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public searchRequestByStatusUsingGET(orderBy?: string, page?: number, size?: number, sortBy?: string, status?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {






        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (orderBy !== undefined && orderBy !== null) {
            queryParameters = queryParameters.set('orderBy', <any>orderBy);
        }
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (size !== undefined && size !== null) {
            queryParameters = queryParameters.set('size', <any>size);
        }
        if (sortBy !== undefined && sortBy !== null) {
            queryParameters = queryParameters.set('sortBy', <any>sortBy);
        }
        if (status !== undefined && status !== null) {
            queryParameters = queryParameters.set('status', <any>status);
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/api/v1/requests/searchByStatus`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Search request by Type
     * Search request by Type
     * @param orderBy orderBy
     * @param page page
     * @param requestType requestType
     * @param size size
     * @param sortBy sortBy
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public searchRequestByTypeUsingGET(orderBy?: string, page?: number, requestType?: string, size?: number, sortBy?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public searchRequestByTypeUsingGET(orderBy?: string, page?: number, requestType?: string, size?: number, sortBy?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public searchRequestByTypeUsingGET(orderBy?: string, page?: number, requestType?: string, size?: number, sortBy?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public searchRequestByTypeUsingGET(orderBy?: string, page?: number, requestType?: string, size?: number, sortBy?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {






        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (orderBy !== undefined && orderBy !== null) {
            queryParameters = queryParameters.set('orderBy', <any>orderBy);
        }
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (requestType !== undefined && requestType !== null) {
            queryParameters = queryParameters.set('requestType', <any>requestType);
        }
        if (size !== undefined && size !== null) {
            queryParameters = queryParameters.set('size', <any>size);
        }
        if (sortBy !== undefined && sortBy !== null) {
            queryParameters = queryParameters.set('sortBy', <any>sortBy);
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/api/v1/requests/searchByType`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update/Insert a request for system
     * Update/Insert a request
     * @param body request
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateRequestUsingPUT(body: RequestDto, id: number, observe?: 'body', reportProgress?: boolean): Observable<RequestDto>;
    public updateRequestUsingPUT(body: RequestDto, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<RequestDto>>;
    public updateRequestUsingPUT(body: RequestDto, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<RequestDto>>;
    public updateRequestUsingPUT(body: RequestDto, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateRequestUsingPUT.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateRequestUsingPUT.');
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<RequestDto>('put',`${this.basePath}/api/v1/requests/update/${encodeURIComponent(String(id))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
