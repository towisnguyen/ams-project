/**
 * Demo REST API
 * User Management API.
 *
 * OpenAPI spec version: API v1.0.0
 * Contact: nhtoi@tma.com.vn
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { AssetCreateDto } from '../model/assetCreateDto';
import { AssetDto } from '../model/assetDto';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class AssetControllerService {

    protected basePath = '//10.102.1.190:8080';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Create new asset
     * Create new asset for system
     * @param body assetCreateDto
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createAssetUsingPOST(body: AssetCreateDto, observe?: 'body', reportProgress?: boolean): Observable<AssetDto>;
    public createAssetUsingPOST(body: AssetCreateDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AssetDto>>;
    public createAssetUsingPOST(body: AssetCreateDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AssetDto>>;
    public createAssetUsingPOST(body: AssetCreateDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createAssetUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<AssetDto>('post',`${this.basePath}/api/v1/assets/create`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete an asset by id
     * Delete an asset for system
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteAssetByIdUsingDELETE(id: number, observe?: 'body', reportProgress?: boolean): Observable<AssetDto>;
    public deleteAssetByIdUsingDELETE(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AssetDto>>;
    public deleteAssetByIdUsingDELETE(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AssetDto>>;
    public deleteAssetByIdUsingDELETE(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteAssetByIdUsingDELETE.');
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<AssetDto>('delete',`${this.basePath}/api/v1/assets/delete/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Export to excel
     * Export to excel
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public exportToExcelUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public exportToExcelUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public exportToExcelUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public exportToExcelUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/api/v1/assets/export/excel`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Search assets with pagination
     * Search assets with pagination
     * @param categoryName categoryName
     * @param currentOwner currentOwner
     * @param imei imei
     * @param inventoryNumber inventoryNumber
     * @param keyword keyword
     * @param limit limit
     * @param orderBy orderBy
     * @param page page
     * @param projectName projectName
     * @param serialNumber serialNumber
     * @param sortBy sortBy
     * @param status status
     * @param supplierName supplierName
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public filterByCertainFieldsUsingGET(categoryName?: string, currentOwner?: string, imei?: string, inventoryNumber?: string, keyword?: string, limit?: number, orderBy?: string, page?: number, projectName?: string, serialNumber?: string, sortBy?: string, status?: string, supplierName?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public filterByCertainFieldsUsingGET(categoryName?: string, currentOwner?: string, imei?: string, inventoryNumber?: string, keyword?: string, limit?: number, orderBy?: string, page?: number, projectName?: string, serialNumber?: string, sortBy?: string, status?: string, supplierName?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public filterByCertainFieldsUsingGET(categoryName?: string, currentOwner?: string, imei?: string, inventoryNumber?: string, keyword?: string, limit?: number, orderBy?: string, page?: number, projectName?: string, serialNumber?: string, sortBy?: string, status?: string, supplierName?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public filterByCertainFieldsUsingGET(categoryName?: string, currentOwner?: string, imei?: string, inventoryNumber?: string, keyword?: string, limit?: number, orderBy?: string, page?: number, projectName?: string, serialNumber?: string, sortBy?: string, status?: string, supplierName?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {














        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (categoryName !== undefined && categoryName !== null) {
            queryParameters = queryParameters.set('categoryName', <any>categoryName);
        }
        if (currentOwner !== undefined && currentOwner !== null) {
            queryParameters = queryParameters.set('currentOwner', <any>currentOwner);
        }
        if (imei !== undefined && imei !== null) {
            queryParameters = queryParameters.set('imei', <any>imei);
        }
        if (inventoryNumber !== undefined && inventoryNumber !== null) {
            queryParameters = queryParameters.set('inventoryNumber', <any>inventoryNumber);
        }
        if (keyword !== undefined && keyword !== null) {
            queryParameters = queryParameters.set('keyword', <any>keyword);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (orderBy !== undefined && orderBy !== null) {
            queryParameters = queryParameters.set('orderBy', <any>orderBy);
        }
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (projectName !== undefined && projectName !== null) {
            queryParameters = queryParameters.set('projectName', <any>projectName);
        }
        if (serialNumber !== undefined && serialNumber !== null) {
            queryParameters = queryParameters.set('serialNumber', <any>serialNumber);
        }
        if (sortBy !== undefined && sortBy !== null) {
            queryParameters = queryParameters.set('sortBy', <any>sortBy);
        }
        if (status !== undefined && status !== null) {
            queryParameters = queryParameters.set('status', <any>status);
        }
        if (supplierName !== undefined && supplierName !== null) {
            queryParameters = queryParameters.set('supplierName', <any>supplierName);
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/api/v1/assets/filterAssetsByCertainFields`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Find an asset by id
     * Find an asset by id
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findAssetByIdUsingGET(id: number, observe?: 'body', reportProgress?: boolean): Observable<AssetDto>;
    public findAssetByIdUsingGET(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AssetDto>>;
    public findAssetByIdUsingGET(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AssetDto>>;
    public findAssetByIdUsingGET(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling findAssetByIdUsingGET.');
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<AssetDto>('get',`${this.basePath}/api/v1/assets/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get paging assets by name
     * Get paging assets by name
     * @param name name
     * @param orderBy orderBy
     * @param page page
     * @param size size
     * @param sortBy sortBy
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllAssetsUsingGET(name?: string, orderBy?: string, page?: number, size?: number, sortBy?: string, observe?: 'body', reportProgress?: boolean): Observable<AssetDto>;
    public getAllAssetsUsingGET(name?: string, orderBy?: string, page?: number, size?: number, sortBy?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AssetDto>>;
    public getAllAssetsUsingGET(name?: string, orderBy?: string, page?: number, size?: number, sortBy?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AssetDto>>;
    public getAllAssetsUsingGET(name?: string, orderBy?: string, page?: number, size?: number, sortBy?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {






        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (name !== undefined && name !== null) {
            queryParameters = queryParameters.set('name', <any>name);
        }
        if (orderBy !== undefined && orderBy !== null) {
            queryParameters = queryParameters.set('orderBy', <any>orderBy);
        }
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (size !== undefined && size !== null) {
            queryParameters = queryParameters.set('size', <any>size);
        }
        if (sortBy !== undefined && sortBy !== null) {
            queryParameters = queryParameters.set('sortBy', <any>sortBy);
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<AssetDto>('get',`${this.basePath}/api/v1/assets`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Search assets by category
     * Search assets by category
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTotalAssetsByCategoriesUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getTotalAssetsByCategoriesUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getTotalAssetsByCategoriesUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getTotalAssetsByCategoriesUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/api/v1/assets/getTotalAssetsByCategories`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Search assets by project
     * Search assets by project
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTotalAssetsByProjectsUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getTotalAssetsByProjectsUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getTotalAssetsByProjectsUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getTotalAssetsByProjectsUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/api/v1/assets/getTotalAssetsByProjects`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Search assets by status
     * Search assets by status
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTotalAssetsByStatusUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getTotalAssetsByStatusUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getTotalAssetsByStatusUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getTotalAssetsByStatusUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/api/v1/assets/getTotalAssetsByStatus`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Search assets by supplier
     * Search assets by supplier
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTotalAssetsBySuppliersUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getTotalAssetsBySuppliersUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getTotalAssetsBySuppliersUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getTotalAssetsBySuppliersUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/api/v1/assets/getTotalAssetsBySuppliers`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update/Insert an asset
     * Update/Insert an asset for system
     * @param body assetCreateDto
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateAssetByIdUsingPUT(body: AssetCreateDto, id: number, observe?: 'body', reportProgress?: boolean): Observable<AssetDto>;
    public updateAssetByIdUsingPUT(body: AssetCreateDto, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AssetDto>>;
    public updateAssetByIdUsingPUT(body: AssetCreateDto, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AssetDto>>;
    public updateAssetByIdUsingPUT(body: AssetCreateDto, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateAssetByIdUsingPUT.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateAssetByIdUsingPUT.');
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<AssetDto>('put',`${this.basePath}/api/v1/assets/update/${encodeURIComponent(String(id))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
